# 책예제

package javaStudy.example;

import java.util.concurrent.Callable;
import java.util.concurrent.ExecutionException;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;
import java.util.concurrent.Future;

public class MultithreadedFindMaxTask {

	public static void main(String[] args) throws InterruptedException, ExecutionException{
		int[] a = {1,3,5,7,9};
		System.out.println(max(a));
	}
	
	public static int max(int[] data) throws InterruptedException, ExecutionException {
		if(data.length == 1){
			
		}else if(data.length == 0){
			throw new IllegalArgumentException();
		}
		
		FindMaxTask task1 = new FindMaxTask(data,0,data.length/2);
		FindMaxTask task2 = new FindMaxTask(data,data.length/2,data.length);
		
		ExecutorService service = Executors.newFixedThreadPool(2);
		
		Future<Integer> future1 = service.submit(task1);
		Future<Integer> future2 = service.submit(task2);
		
		return Math.max(future1.get(), future2.get());
	}
}

class FindMaxTask implements Callable<Integer>{

	private int[] data;
	private int start;
	private int end;
	
	FindMaxTask(int[] data, int start, int end){
		this.data = data;
		this.start = start;
		this.end = end;
	}
	
	public Integer call(){
		int max = Integer.MIN_VALUE;
		for(int i = start; i<end;i++){
			if(data[i]>max)max=data[i];
		}
		return max;
	}
}
