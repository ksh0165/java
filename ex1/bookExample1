package javaStudy.example;

import java.io.IOException;
import java.nio.file.Files;
import java.nio.file.Path;
import java.nio.file.Paths;
import java.util.ArrayList;
import java.util.List;
import java.util.concurrent.ForkJoinPool;
import java.util.concurrent.RecursiveTask;
import java.util.stream.Collectors;

public class Sample1 extends RecursiveTask<Long>{
	private final Path path;
	
	public Sample1(Path path){
		this.path = path;
	}
	
	protected Long compute(){
		long fileSize = 0;
		
		if(Files.isDirectory(path)){
			try{
				
				List<Path> fileList = Files.list(path).collect(Collectors.toList());
				List<Sample1> taskList = new ArrayList<>();
				
				for(Path file : fileList){
					Sample1 subTask = new Sample1(file);
					subTask.fork();
					taskList.add(subTask);
				}
				
				Long subSize = 0L;
				for(Sample1 subTask : taskList){
					subSize += subTask.join();
				}
				
				return subSize;
			}catch(IOException e){e.printStackTrace();}
		}else{
			try{
				fileSize = Files.size(path);
			}catch(IOException e){System.out.println("ERROR : "+path);}
		}
		return fileSize;
	}
	
	public static void main(String[] args){
		Path rootPath = Paths.get("C:\\Users\\seong\\Desktop\\netty.book.kor-master");
		
		ForkJoinPool pool = new ForkJoinPool();
		System.out.printf(" 별열 처리 크기 : %s\n", pool.getParallelism());
		System.out.printf(" 합계 : %s\n", pool.invoke(new Sample1(rootPath)));
	}
}
