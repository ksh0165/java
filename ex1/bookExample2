package javaStudy.example;

import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import java.util.concurrent.Callable;
import java.util.concurrent.ExecutionException;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;
import java.util.concurrent.Future;
import java.util.concurrent.TimeUnit;

public class Sample2 {

	public Callable<Long> calSquare(long value){
		Callable<Long> callable = new Callable<Long>(){
			public Long call() throws Exception{
				Long returnValue = value * value;
				TimeUnit.SECONDS.sleep(1);
				System.out.println(value + "의 제곱근은 ? "+returnValue);
				return returnValue;
			}
		};
		return callable;
	}
	
	public void executeTest(){
		List<Long> list = Arrays.asList(1L,2L,3L,5L,6L,7L,8L,9L);
		
		List<Future<Long>> futureList = new ArrayList<>();
		
		ExecutorService servicePool = Executors.newFixedThreadPool(4);
		
		for(Long val : list){
			Future<Long> future = servicePool.submit(calSquare(val));
			futureList.add(future);
		}
		
		Long sumValue = 0L;
		
		for(Future<Long> future : futureList){
			try{
				sumValue += future.get();
			}catch(ExecutionException | InterruptedException e){
				e.printStackTrace();
			}
		}
		
		System.out.println("최종 합계 : "+sumValue);
		
		servicePool.shutdown();
	}
	
	
	public static void main(String[] args){
		Sample2 e2 = new Sample2();
		e2.executeTest();
	}
}
