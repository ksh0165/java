import java.util.concurrent.TimeUnit;

import io.reactivex.rxjava3.core.Flowable;

public class Samplef {
	private enum State{
		ADD, MULTIPLY;
	}
	
	private static State calcMethod;
	
	public static void main(String[] args) throws InterruptedException{
//		Flowable<String> flowable = Flowable.just("Hello","World");
//		flowable.subscribe(data->System.out.println(data));
		
//		Flowable<Integer> flowable = Flowable.just(1,2,3,4,5,6,7,8,9,10)
//				.filter(data->data%2 ==0)
//				.map(data->data*100);
//		
//		flowable.subscribe(data->System.out.println("data="+data));
		
		
		calcMethod = State.ADD;
		
		Flowable<Long> flowable = Flowable.interval(300L, TimeUnit.MILLISECONDS)
				.take(7)
				.scan((sum,data)->{
					if(calcMethod==State.ADD){
						return sum+data;
					}else{
						return sum*data;
					}
				});
		flowable.subscribe(data->System.out.println("data="+data));
		
		Thread.sleep(1000);
		System.out.println("계산 방법 변경");
		calcMethod = State.MULTIPLY;
		
		Thread.sleep(2000);
				
	}
}
